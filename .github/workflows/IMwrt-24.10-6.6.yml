name: IMwrt-24.10-6.6

on:
  repository_dispatch:
    types: [build_firmware]
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Target device model'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - huasifei_wh3000-emmc
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: 'Enable 5G 25dB patch'
        type: boolean
        required: true
        default: false
      repo_url:
        description: 'Source repo URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: 'Source repo branch'
        default: 'openwrt-24.10-6.6'
  schedule:
    - cron: '0 7 * * 5' # Every Friday 07:00 UTC (15:00 Beijing)

permissions:
  contents: write
  actions: write

env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  ENABLE_5G_25DB: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_5g_25db || secrets.ENABLE_5G_25DB || 'false' }}

jobs:
  check-source-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: last-checked-sha
        continue-on-error: true
      - run: sudo apt-get update -y && sudo apt-get install -y gh
      - id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_SHA=$(gh api repos/padavanonly/immortalwrt-mt798x-24.10/commits/$REPO_BRANCH --jq '.sha' || echo "")
          [ -z "$LATEST_SHA" ] && { echo "should_build=false" >> $GITHUB_OUTPUT; exit 0; }
          LAST_CHECKED_SHA=$(cat last_checked_sha.txt 2>/dev/null || echo "")
          if [ "$LATEST_SHA" != "$LAST_CHECKED_SHA" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "$LATEST_SHA" > last_checked_sha.txt
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: last-checked-sha
          path: last_checked_sha.txt

  build:
    needs: check-source-updates
    if: github.event_name == 'workflow_dispatch' || needs.check-source-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.device_model)) || fromJSON('["cmcc_rax3000m", "xiaomi_mi-router-ax3000t"]') }}
      max-parallel: 18
    steps:
      - run: |
          echo "Trigger: ${{ github.event_name }}"
          echo "Device: ${{ matrix.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "Repo: ${{ env.REPO_URL }} Branch: ${{ env.REPO_BRANCH }}"
      - uses: actions/checkout@v4
      - run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ] && { echo "Insufficient disk space: ${AVAILABLE}G, need ${MIN_SPACE}G"; exit 1; }
          echo "Available disk space: ${AVAILABLE}G"
      - env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo apt-get update -y
          sudo apt-get install -y build-essential ccache cmake curl git gawk gcc-multilib g++-multilib \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool \
            ninja-build python3 python3-pip python3-ply python3-docutils python3-pyelftools \
            rsync unzip vim wget zlib1g-dev squashfs-tools device-tree-compiler zstd \
            binutils bison flex gettext p7zip p7zip-full patch pkgconf autopoint asciidoc xmlto texinfo
          sudo apt-get autoremove --purge -y
          sudo apt-get clean
          sudo timedatectl set-timezone "$TZ" || echo "Warning: Failed to set timezone"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - run: |
          echo "export PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 5G
      - run: sudo apt-get install -y gh
      - working-directory: /workdir
        run: |
          [ -d openwrt ] && rm -rf openwrt
          for i in {1..5}; do git clone $REPO_URL -b $REPO_BRANCH openwrt && break; sleep 10; done
          [ ! -d openwrt ] && { echo "Clone failed"; exit 1; }
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      - run: |
          [ ! -f "$DIY_P1_SH" ] && { echo "Missing $DIY_P1_SH"; exit 1; }
          [ ! -f "$DIY_P2_SH" ] && { echo "Missing $DIY_P2_SH"; exit 1; }
          chmod +x $DIY_P1_SH $DIY_P2_SH
      - timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
      - timeout-minutes: 30
        run: |
          cd openwrt
          ./scripts/feeds update -a || exit 1
          ./scripts/feeds install -a || exit 1
      - run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ matrix.device_model }}=y" >> openwrt/.config
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          make defconfig
      - timeout-minutes: 30
        run: |
          cd openwrt
          make download -j8 || exit 1
          find dl -size -1024c -exec rm -f {} \;
      - if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          EEPROM_FILE=$(find package -type f -name "MT7981_iPAiLNA_EEPROM.bin" -print -quit 2>/dev/null)
          [ -z "$EEPROM_FILE" ] && { echo "EEPROM file not found"; exit 1; }
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM updated: $EEPROM_FILE"
          else
            echo "EEPROM unchanged: $EEPROM_FILE"
          fi
      - id: compile
        timeout-minutes: 180
        run: |
          cd openwrt
          make -j$(nproc) V=s || make -j4 V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          echo "RELEASE_TAG=ImmortalWrt-24.10-${{ matrix.device_model }}-${{ env.FIRMWARE_VERSION }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          **Firmware**: ImmortalWrt ${{ env.FIRMWARE_VERSION }}
          **Device**: ${{ matrix.device_model }}
          **Build Time**: $(date +"%Y-%m-%d %H:%M %Z")
          **High Power**: ${{ env.ENABLE_5G_25DB == 'true' && 'Enabled' || 'Disabled' }}
          EOF
          echo "status=success" >> $GITHUB_OUTPUT
      - uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: |
            openwrt/bin/targets/*/*sysupgrade*.*
            openwrt/bin/targets/*/*factory*.*
          overwrite: true
      - if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          [ -z "${{ env.WEBDAV_URL }}" ] || [ -z "${{ env.WEBDAV_USERNAME }}" ] || [ -z "${{ env.WEBDAV_PASSWORD }}" ] && { echo "WebDAV config missing"; exit 1; }
      - if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          FIRMWARE_FILES=$(find openwrt/bin/targets -type f \( -name "*sysupgrade*.*" -o -name "*factory*.*" \) ! -name "*-bl2*")
          [ -z "$FIRMWARE_FILES" ] && { echo "No firmware files found"; exit 0; }
          for FILE in $FIRMWARE_FILES; do
            NEW_NAME="${{ matrix.device_model }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            RESPONSE=$(curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                   -T "$FILE" "${{ env.WEBDAV_URL }}/$NEW_NAME" -w "%{http_code}" -o /dev/null)
            [ "$RESPONSE" -ne 201 ] && [ "$RESPONSE" -ne 204 ] && [ "$RESPONSE" -ne 200 ] && { echo "Upload failed: $NEW_NAME ($RESPONSE)"; exit 1; }
            echo "Uploaded: $NEW_NAME"
          done
      - if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --repo ${{ github.repository }} --limit 20 --json name --jq '.[] | select(.name | test("ImmortalWrt-24.10-${{ matrix.device_model }}")) | .name' | tail -n +5 | xargs -I {} gh release delete {} --yes || echo "Warning: Failed to delete release {}"
      - if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 7
          keep_minimum_runs: 3
