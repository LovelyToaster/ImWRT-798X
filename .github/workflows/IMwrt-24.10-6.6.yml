# Optimized for self-hosted Oracle Linux ARM64 VPS
# Removed repository_dispatch and schedule triggers to simplify for self-hosted use
# Kept workflow_dispatch for manual triggering with device model and 5G 25dB options
name: IMwrt-24.10-6.6

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Select target device model'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - huasifei_wh3000-emmc
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: 'Enable 5G 25dB modification'
        type: boolean
        required: true
        default: false
      repo_url:
        description: 'Source repository URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: 'Source repository branch'
        default: 'openwrt-24.10-6.6'

# No permissions block needed for self-hosted runners
env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  ENABLE_5G_25DB: ${{ github.event.inputs.enable_5g_25db || 'false' }}

jobs:
  build:
    # Specify self-hosted runner with ARM64 architecture
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: Debug information
        run: |
          echo "Trigger: ${{ github.event_name }}"
          echo "Device model: ${{ github.event.inputs.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "Source repo: ${{ env.REPO_URL }} Branch: ${{ env.REPO_BRANCH }}"

      - name: Check disk space
        run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          if [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ]; then
            echo "Error: Insufficient disk space, available ${AVAILABLE}G, need at least ${MIN_SPACE}G"
            exit 1
          fi
          echo "Available disk space: ${AVAILABLE}G"

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # Oracle Linux uses dnf instead of apt-get
          sudo dnf update -y
          sudo dnf install -y \
            bash binutils bzip2 coreutils cpio curl diffutils elfutils-libelf-devel \
            findutils gawk gcc gcc-c++ git gzip make ncurses-libs patch perl \
            python3 python3-devel rsync tar unzip vim wget which xz zlib-devel
          sudo dnf autoremove -y
          sudo dnf clean all
          sudo timedatectl set-timezone "$TZ" || echo "Warning: Failed to set timezone"
          sudo mkdir -p /workdir
          sudo chown $USER:$USER /workdir

      - name: Configure ccache
        run: |
          sudo dnf install -y ccache
          echo "export PATH=/usr/lib64/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 5G

      - name: Clone source code
        working-directory: /workdir
        run: |
          if [ -d "openwrt" ]; then
            echo "Cleaning existing openwrt directory..."
            rm -rf openwrt
          fi
          for i in {1..3}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "Clone failed, retry $i/3"
            sleep 5
          done
          if [ ! -d "openwrt" ]; then
            echo "Error: Source clone failed"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Validate script files
        run: |
          for script in "$DIY_P1_SH" "$ langage
          script=$DIY_P2_SH"; do
            if [ ! -f "$script" ]; then
              echo "Error: $script not found"
              exit 1
            fi
            chmod +x "$script"
          done

      - name: Load feeds
        timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update and install feeds
        timeout-minutes: 20
        run: |
          cd openwrt
          ./scripts/feeds update -a || { echo "Failed to update feeds"; exit 1; }
          ./scripts/feeds install -a || { echo "Failed to install feeds"; exit 1; }

      - name: Load configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ github.event.inputs.device_model }}=y" >> openwrt/.config
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          make defconfig

      - name: Download packages
        timeout-minutes: 20
        run: |
          cd openwrt
          make download -j$(nproc) || { echo "Failed to download packages"; exit 1; }
          find dl -size -1024c -exec rm -f {} \; || echo "Warning: Failed to clean small files in dl directory"

      - name: Modify 5G 25dB
        if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          EEPROM_FILE=$(find package -type f -name "MT7981_iPAiLNA_EEPROM.bin" -print -quit 2>/dev/null)
          if [ -z "$EEPROM_FILE" ]; then
            echo "Error: EEPROM file not found"
            exit 1
          fi
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM file updated: $EEPROM_FILE"
          else
            echo "EEPROM file does not need modification: $EEPROM_FILE"
          fi

      - name: Compile firmware
        id: compile
        timeout-minutes: 120
        run: |
          cd openwrt
          make -j$(nproc) V=s || make -j2 V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ github.event.inputs.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Save compile logs
        if: failure()
        run: |
          mkdir -p logs
          cp -r openwrt/build_dir logs/ 2>/dev/null || true
          cp -r openwrt/logs logs/ 2>/dev/null || true
          cp openwrt/*.log logs/ 2>/dev/null || true
          tar -czf compile-log-${{ github.event.inputs.device_model }}.tar.gz logs
          echo "Logs saved to compile-log-${{ github.event.inputs.device_model }}.tar.gz"

      - name: Extract firmware version
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt
          if [ -f build.version ]; then
            VERSION=$(grep -E '^VERSION=' build.version | cut -d'=' -f2 | sed 's/^r//g' | tr -d '[:space:]' || echo "unknown")
          else
            VERSION=$(git rev-parse --short HEAD | cut -d'-' -f1 || echo "unknown")
          fi
          echo "FIRMWARE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize firmware
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade* *factory*; do
            if [ -f "$file" ] && ! echo "$file" | grep -q "-bl2"; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              EXT="${file##*.}"
              NEW_NAME="${{ github.event.inputs.device_model }}_25dB-${{ env.ENABLE_5G_25DB == 'true' && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}_${{ env.FILE_DATE }}_${TYPE}.${EXT}"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload to WebDAV
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          FIRMWARE_FILES=$(find openwrt/bin/targets -type f \( -name "*sysupgrade*.*" -o -name "*factory*.*" \) ! -name "*-bl2*")
          [ -z "$FIRMWARE_FILES" ] && { echo "No firmware files found, skipping upload"; exit 0; }
          for FILE in $FIRMWARE_FILES; do
            NEW_NAME="${{ github.event.inputs.device_model }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            echo "Uploading: $FILE â†’ $NEW_NAME"
            curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                 -T "$FILE" "${{ env.WEBDAV_URL }}/$NEW_NAME" || { echo "Upload failed: $NEW_NAME"; exit 1; }
            echo "Uploaded: $NEW_NAME"
          done
