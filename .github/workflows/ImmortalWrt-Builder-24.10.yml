name: ImmortalWrt-Builder-24.10

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_a10
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - cmcc_rax3000m-emmc-usboffload
          - cmcc_rax3000m-usboffload
          - cmcc_rax3000me
          - cmcc_xr30
          - cmcc_xr30-emmc
      enable_5g_25db:
        description: '启用 5G 25dB 修改'
        type: boolean
        required: true
        default: true
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 时间 00:00 运行（北京时间 08:00）

permissions:
  contents: write
  actions: write

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 2410.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}

jobs:
  check-source-updates:
    runs-on: ubuntu-22.04
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 检出本仓库代码
        uses: actions/checkout@v4

      - name: 安装 GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: 检查源仓库更新
        id: check
        run: |
          LATEST_SHA=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/padavanonly/immortalwrt-mt798x-24.10/commits/$REPO_BRANCH" | jq -r '.sha')
          LAST_CHECKED_FILE="last_checked_sha.txt"
          if [ -f "$LAST_CHECKED_FILE" ]; then
            LAST_CHECKED_SHA=$(cat "$LAST_CHECKED_FILE")
          else
            LAST_CHECKED_SHA=""
          fi
          if [ "$LATEST_SHA" != "$LAST_CHECKED_SHA" ]; then
            echo "检测到源仓库有新更新。最新 SHA: $LATEST_SHA，上次检查: $LAST_CHECKED_SHA"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "$LATEST_SHA" > "$LAST_CHECKED_FILE"
          else
            echo "源仓库无更新，跳过编译。"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 上传上次检查的 SHA
        if: steps.check.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: last-checked-sha
          path: last_checked_sha.txt

  build:
    needs: check-source-updates
    if: github.event_name == 'workflow_dispatch' || (needs.check-source-updates.outputs.should_build == 'true' && github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-22.04
    name: 编译 ${{ matrix.device_model }}
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.device_model)) || fromJSON('["cmcc_a10", "cmcc_rax3000m", "cmcc_rax3000m-emmc", "cmcc_rax3000m-emmc-usboffload", "cmcc_rax3000m-usboffload", "cmcc_rax3000me", "cmcc_xr30", "cmcc_xr30-emmc"]') }}
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ matrix.device_model }}"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
            python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
            uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zip
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 安装 GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: 克隆源码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 加载 Feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 加载配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_mt7981_DEVICE_${{ matrix.device_model }}=y" >> openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 修改 5G 25dB
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.enable_5g_25db == 'true'
        working-directory: ./openwrt
        run: |
          mkdir -p package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom
          printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of=package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin bs=1 seek=$((0x445)) conv=notrunc

      - name: 编译固件
        id: compile
        timeout-minutes: 120
        run: |
          set -e
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || { make -j1 V=s && exit 1; }
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 提取固件版本号
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt
          VERSION_FILE=$(find bin/targets/*/*/ -type f -name "build.version" 2>/dev/null | head -n 1)
          if [ -n "$VERSION_FILE" ] && [ -f "$VERSION_FILE" ]; then
            VERSION=$(cat "$VERSION_FILE")
            echo "从 $VERSION_FILE 提取版本: $VERSION"
          else
            VERSION_FILE=$(find staging_dir/target-*/root-*/etc/ -type f -name "build.version" 2>/dev/null | head -n 1)
            if [ -n "$VERSION_FILE" ] && [ -f "$VERSION_FILE" ]; then
              VERSION=$(cat "$VERSION_FILE")
              echo "从 $VERSION_FILE 提取版本: $VERSION"
            else
              VERSION="24.10-SNAPSHOT r$(git rev-list --count origin/$REPO_BRANCH)-$(git rev-parse --short origin/$REPO_BRANCH)"
              echo "未找到 build.version，使用源仓库版本: $VERSION"
            fi
          fi
          SAFE_VERSION=$(echo "$VERSION" | grep -o 'r[0-9]\+' || echo "r0000")
          echo "提取的版本号: $SAFE_VERSION"
          echo "FIRMWARE_VERSION=$SAFE_VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 检查磁盘
        if: always()
        run: |
          df -hT

      - name: 整理固件并固定文件名
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade.bin; do
            if [ -f "$file" ]; then
              NEW_NAME="${{ matrix.device_model }}_25dB-${{ (github.event_name != 'workflow_dispatch' || github.event.inputs.enable_5g_25db == 'true') && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}_sysupgrade.bin"
              mv "$file" "$NEW_NAME"
              echo "FIRMWARE_FILE=$PWD/$NEW_NAME" >> $GITHUB_ENV
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 生成标签和发布描述
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          echo "RELEASE_TAG=ImmortalWrt 24.10-${{ matrix.device_model }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          **固件版本**: ImmortalWrt ${{ env.FIRMWARE_VERSION }}  
          **设备机型**: ${{ matrix.device_model }}  
          **编译时间**: $(date +"%Y-%m-%d %H:%M %Z")  
          **高功率模式**: ${{ (github.event_name != 'workflow_dispatch' || github.event.inputs.enable_5g_25db == 'true') && '已启用' || '未启用' }}  
          - 源码: [immortalwrt-mt798x-24.10](https://github.com/padavanonly/immortalwrt-mt798x-24.10)
          EOF
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE_FILE }}
          overwrite: true

      - name: 上传到 WebDAV
        if: steps.organize.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          set -e
          echo "开始上传到 WebDAV: ${{ env.FIRMWARE_FILE }} -> ${{ env.WEBDAV_URL }}/$(basename ${{ env.FIRMWARE_FILE }})"
          START_TIME=$(date +%s)
          TIMEOUT=3600
          RETRY_DELAY=15
          ATTEMPT=1
          while true; do
            echo "尝试第 $ATTEMPT 次上传..."
            STATUS=$(curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                          -T "${{ env.FIRMWARE_FILE }}" \
                          "${{ env.WEBDAV_URL }}/$(basename ${{ env.FIRMWARE_FILE }})" \
                          -w "%{http_code}" -o /dev/null -s)
            if [ "$STATUS" -eq 201 ] || [ "$STATUS" -eq 204 ]; then
              echo "上传成功，状态码: $STATUS"
              curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                   -I "${{ env.WEBDAV_URL }}/$(basename ${{ env.FIRMWARE_FILE }})" -s | grep "HTTP/1.1 200" && echo "文件验证成功" || echo "警告：文件可能未正确上传"
              break
            else
              echo "上传失败，状态码: $STATUS"
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
                echo "错误：经过 1 小时（$ELAPSED_TIME 秒）尝试后仍无法上传到 WebDAV，终止任务"
                exit 1
              fi
              echo "等待 $RETRY_DELAY 秒后重试... 已用时 $ELAPSED_TIME 秒"
              sleep $RETRY_DELAY
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: 清理旧 Releases
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --repo ${{ github.repository }} --limit 100 | tail -n +11 | awk '{print $1}' | xargs -I {} gh release delete {} --yes

      - name: 清理旧工作流运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 3
