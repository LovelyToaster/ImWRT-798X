name: ImmortalWrt-Builder-24.10

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Select target device model'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - cmcc_rax3000m-usboffload
          - cmcc_rax3000m-emmc-usboffload
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: 'Enable 5G 25dB modification'
        type: boolean
        required: true
        default: true
      upload_bin_dir:
        description: 'Upload bin directory'
        type: boolean
        required: false
        default: false
  schedule:
    - cron: '0 21 * * *' # UTC 21:00 = Asia/Shanghai 05:00

permissions:
  contents: write
  actions: write

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 2410.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build ${{ matrix.device_model }}
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'schedule' && fromJSON('["cmcc_rax3000m-usboffload", "cmcc_rax3000m-emmc-usboffload"]') || fromJSON(format('["{0}"]', github.event.inputs.device_model)) }}
    steps:
      # ... 其他步骤保持不变，直到“上传到 WebDAV”之前 ...

      - name: 上传到 WebDAV
        if: steps.compress.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          set -e
          echo "开始上传到 WebDAV: ${{ env.ZIP_PATH }} -> ${{ env.WEBDAV_URL }}/${{ env.ZIP_NAME }}"
          
          # 设置重试次数和间隔
          MAX_RETRIES=3
          RETRY_DELAY=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_RETRIES ]; do
            echo "尝试第 $ATTEMPT 次上传..."
            # 执行上传并捕获状态码
            STATUS=$(curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                          -T "${{ env.ZIP_PATH }}" \
                          "${{ env.WEBDAV_URL }}/${{ env.ZIP_NAME }}" \
                          -w "%{http_code}" -o /dev/null -s)
            
            if [ "$STATUS" -eq 201 ] || [ "$STATUS" -eq 204 ]; then
              echo "上传成功，状态码: $STATUS"
              # 验证上传结果
              curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                   -I "${{ env.WEBDAV_URL }}/${{ env.ZIP_NAME }}" -s | grep "HTTP/1.1 200" && echo "文件验证成功" || echo "警告：文件可能未正确上传"
              break
            else
              echo "上传失败，状态码: $STATUS"
              if [ $ATTEMPT -eq $MAX_RETRIES ]; then
                echo "错误：经过 $MAX_RETRIES 次尝试后仍无法上传到 WebDAV"
                echo "请检查 WEBDAV_URL、WEBDAV_USERNAME 和 WEBDAV_PASSWORD 是否正确配置"
                exit 1
              fi
              sleep $RETRY_DELAY
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: 清理旧 Releases
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --repo ${{ github.repository }} --limit 100 | tail -n +4 | awk '{print $1}' | xargs -I {} gh release delete {} --yes

      - name: 清理旧工作流运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2
