# 此工作流为 MT798x 设备编译 ImmortalWrt 23.05 固件。
# 支持手动触发、定时编译和源更新自动编译。
# 固件上传至 GitHub Releases 和 WebDAV 的 WRT23.05 文件夹。
# 请在 GitHub Secrets 中配置 WEBDAV_URL、WEBDAV_USERNAME、WEBDAV_PASSWORD、MAIL_USERNAME 和 MAIL_PASSWORD。

name: IMwrt-23.05

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: false  # 修改：手动触发时设备型号可选
        options:
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - cmcc_rax3000m-emmc-usboffload
          - cmcc_rax3000m-usboffload
          - cmcc_rax3000me
          - cmcc_xr30
          - cmcc_xr30-emmc
      enable_5g_25db:
        description: '启用 5G 25dB 修改'
        type: boolean
        required: true
        default: true
      upload_bin_dir:
        description: '上传 bin 目录'
        type: boolean
        required: false
        default: false
  schedule:
    - cron: '0 7 * * 5'  # 每周五 UTC 时间 07:00 运行（北京时间 15:00）

permissions:
  contents: write
  actions: write

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 2305.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  WEBDAV_PATH: WRT23.05  # WebDAV 的 23.05 文件夹

jobs:
  check-source-updates:
    runs-on: ubuntu-22.04
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 检查源仓库更新
        id: check
        run: |
          LATEST_SHA=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/padavanonly/immortalwrt-mt798x-24.10/commits/$REPO_BRANCH" | jq -r '.sha')
          LAST_CHECKED_FILE="last_checked_sha.txt"
          LAST_CHECKED_SHA=$(cat "$LAST_CHECKED_FILE" 2>/dev/null || echo "")
          if [ "$LATEST_SHA" != "$LAST_CHECKED_SHA" ]; then
            echo "检测到源仓库更新。最新 SHA: $LATEST_SHA，上次检查: $LAST_CHECKED_SHA"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "$LATEST_SHA" > "$LAST_CHECKED_FILE"
          else
            echo "源仓库无更新，跳过编译。"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 上传上次检查的 SHA
        if: steps.check.outputs.should_build == 'true'
        uses: actions/upload-3.05-${{ matrix.device_model }}-${{ env.FIRMWARE_VERSION }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          **固件版本**: ImmortalWrt ${{ env.FIRMWARE_VERSION }}  
          **设备**: ${{ matrix.device_model }}  
          **编译时间**: $(date +"%Y-%m-%d %H:%M %Z")  
          **高功率模式**: ${{ (github.event_name != 'workflow_dispatch' || github.event.inputs.enable_5g_25db == 'true') && '已启用' || '未启用' }}  
          EOF
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin
          overwrite: true

      - name: 检查 WebDAV 凭证
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          if [ -z "$WEBDAV_URL" ] || [ -z "$WEBDAV_USERNAME" ] || [ -z "$WEBDAV_PASSWORD" ]; then
            echo "错误：缺少 WebDAV 凭证 (WEBDAV_URL, WEBDAV_USERNAME, WEBDAV_PASSWORD)"
            exit 1
          fi
          echo "WebDAV 凭证检查通过"

      - name: 确保 WebDAV 文件夹存在
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
               -X MKCOL "${{ env.WEBDAV_URL }}/${{ env.WEBDAV_PATH }}" || echo "文件夹已存在或 MKCOL 不支持"

      - name: 上传到 WebDAV
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          SYSUPGRADE_FILES=$(find openwrt/bin/targets -type f -name "*.bin")
          if [ -z "$SYSUPGRADE_FILES" ]; then
            echo "未找到固件文件，跳过上传"
            exit 0
          fi
          for FILE in $SYSUPGRADE_FILES; do
            echo "正在上传文件: $FILE"
            curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                 -T "$FILE" \
                 "${{ env.WEBDAV_URL }}/${{ env.WEBDAV_PATH }}/$(basename "$FILE")" || { echo "上传失败: $(basename "$FILE")"; exit 1; }
            echo "上传成功: $(basename "$FILE")"
          done
          echo "所有文件上传完成"

      - name: 清理旧 Releases
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=$(gh release list --repo ${{ github.repository }} --limit 100 --json name --jq '.[] | select(.name | test("ImmortalWrt-23.05-${{ matrix.device_model }}")) | .name' | tail -n +21)
          if [ -n "$RELEASES" ]; then
            for RELEASE in $RELEASES; do
              gh release delete "$RELEASE" --yes || { echo "删除 Release $RELEASE 失败"; exit 1; }
            done
          else
            echo "无需清理旧 Releases"
          fi

      - name: 清理旧工作流运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 20

      - name: 清理构建产物
        if: always()
        run: |
          rm -rf openwrt/build_dir openwrt/staging_dir
