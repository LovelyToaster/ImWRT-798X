name: ImmortalWrt-Builder-24.10-Simulation

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_rax3000m (中国移动 RAX3000M)
          - cmcc_rax3000m-emmc (中国移动 RAX3000M eMMC版)
          - cmcc_rax3000m-usboffload (中国移动 RAX3000M USB卸载版)
          - cmcc_rax3000m-emmc-usboffload (中国移动 RAX3000M eMMC USB卸载版)
          - abt_asr3000 (ABT ASR3000)
          - cetron_ct3003 (赛创 CT3003)
          - cmcc_a10 (中国移动 A10)
          - h3c_nx30pro (H3C NX30 Pro)
          - imou_lc-hx3001 (IMOU LC-HX3001)
          - jcg_q30 (JCG Q30)
          - konka_komi-a31 (康佳 KOMI-A31)
          - livinet_zr-3020 (Livinet ZR-3020)
          - mt7981-360-t7-108M (MT7981 360 T7 108M)
          - mt7981-clt-r30b1 (MT7981 CLT R30B1)
          - mt7981-clt-r30b1-112M (MT7981 CLT R30B1 112M)
          - xiaomi_mi-router-ax3000t (小米路由器 AX3000T)
          - xiaomi_mi-router-ax3000t-stock (小米路由器 AX3000T 原厂版)
          - xiaomi_mi-router-wr30u-112m (小米路由器 WR30U 112M)
          - xiaomi_mi-router-wr30u-stock (小米路由器 WR30U 原厂版)
      enable_5g_25db:
        description: '启用 5G 25dB 高功率模式'
        type: boolean
        required: true
        default: true
      upload_bin_dir:
        description: '上传 bin 目录'
        type: boolean
        required: false
        default: false

permissions:
  contents: write
  actions: write

env:
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-22.04
    name: 编译 ${{ matrix.device_model }}
    strategy:
      matrix:
        device_model: ${{ fromJSON(format('["{0}"]', github.event.inputs.device_model)) }}
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ matrix.device_model }}"

      - name: 模拟编译固件
        id: compile
        run: |
          set -e
          mkdir -p openwrt/bin/targets/mediatek/mt7981
          cd openwrt/bin/targets/mediatek/mt7981
          echo "模拟生成 sysupgrade.bin 文件" > "immortalwrt-mediatek-mt7981-${{ matrix.device_model }}-sysupgrade.bin"
          echo "模拟生成 factory.bin 文件" > "immortalwrt-mediatek-mt7981-${{ matrix.device_model }}-factory.bin"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 上传 bin 目录
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_bin_dir == 'true')
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 整理固件并简化文件名
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd openwrt/bin/targets/mediatek/mt7981
          for file in *sysupgrade.bin *factory.bin; do
            if [ -f "$file" ]; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              NEW_NAME="${{ matrix.device_model }}_$(date +"%Y%m%d%H%M")_25dB-${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && 'on' || 'off' }}_${TYPE}.bin"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 筛选并压缩固件
        id: compress
        if: steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd ${{ env.FIRMWARE }}
          mkdir -p temp
          find . -type f \( -name "*sysupgrade.bin" -o -name "*factory.bin" \) -exec cp {} temp/ \;
          cd temp
          ZIP_NAME="${{ matrix.device_model }}${{ env.FILE_DATE }}_25dB-${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && 'on' || 'off' }}.zip"
          zip -r "$ZIP_NAME" .
          echo "ZIP_PATH=$PWD/$ZIP_NAME" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 生成标签和发布描述
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          echo "release_tag=v24.10-${{ matrix.device_model }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          # ImmortalWrt 24.10 - ${{ matrix.device_model }}

          **版本**: 24.10  
          **设备**: ${{ matrix.device_model }}  
          **编译时间**: $(date +"%Y-%m-%d %H:%M %Z")  
          **高功率模式**: ${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && '已启用' || '未启用' }}  

          ### 下载
          - 固件文件已附在此发布下方  
          - 源码: [immortalwrt-mt798x-24.10](https://github.com/padavanonly/immortalwrt-mt798x-24.10)

          ### 使用方法
          1. 确认设备型号匹配  
          2. 备份原始固件  
          3. 通过 Web 或 SSH 刷入

          > **注意**: 使用不当可能损坏设备，请谨慎操作！
          EOF
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin
          overwrite: true

      - name: 上传固件到 GitHub Artifacts
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin

      - name: 上传到 WebDAV
        if: steps.compress.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          set -e
          curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" -T "${{ env.ZIP_PATH }}" "${{ env.WEBDAV_URL }}/${{ env.ZIP_NAME }}"

      - name: 删除旧运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2
