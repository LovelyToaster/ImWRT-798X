# GitHub Actions workflow for building ImmortalWrt 24.10 firmware (based on kernel 6.6)
# Triggers:
# - repository_dispatch: Triggered via API (requires build_firmware type)
# - workflow_dispatch: Manual trigger with device model and 5G 25dB options
# - schedule: Every Friday at 07:00 UTC (15:00 Beijing time)
name: test-IMwrt-24.10-6.6

on:
  repository_dispatch:
    types: [build_firmware]
  workflow_dispatch:
    inputs:
      device_model:
        description: 'Select target device model'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - huasifei_wh3000-emmc
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: 'Enable 5G 25dB modification'
        type: boolean
        required: true
        default: false
      repo_url:
        description: 'Source repository URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: 'Source repository branch'
        default: 'openwrt-24.10-6.6'
  schedule:
    - cron: '0 7 * * FRI'  # Every Friday at 07:00 UTC (15:00 Beijing time)

permissions:
  contents: write  # For GitHub Releases
  actions: write   # For cleaning old workflow runs

env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  ENABLE_5G_25DB: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_5g_25db || secrets.ENABLE_5G_25DB || 'false' }}

jobs:
  check-source-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download last checked SHA
        uses: actions/download-artifact@v4
        with:
          name: last-checked-sha
        continue-on-error: true

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Check source repository updates
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_SHA=$(gh api repos/padavanonly/immortalwrt-mt798x-24.10/commits/$REPO_BRANCH --jq '.sha' || echo "")
          if [ -z "$LATEST_SHA" ]; then
            echo "Error: Unable to fetch latest SHA from $REPO_URL, possible network issue or repository/branch not found"
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          LAST_CHECKED_FILE="last_checked_sha.txt"
          LAST_CHECKED_SHA=$(cat "$LAST_CHECKED_FILE" 2>/dev/null || echo "")
          if [ "$LATEST_SHA" != "$LAST_CHECKED_SHA" ]; then
            echo "Detected source repository update: $LATEST_SHA"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "$LATEST_SHA" > "$LAST_CHECKED_FILE"
          else
            echo "No source repository updates, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload last checked SHA
        uses: actions/upload-artifact@v4
        with:
          name: last-checked-sha
          path: last_checked_sha.txt

  build:
    needs: check-source-updates
    if: github.event_name == 'workflow_dispatch' || needs.check-source-updates.outputs.should_build == 'true'
    runs-on: self-hosted
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.device_model)) || fromJSON('["cmcc_rax3000m", "xiaomi_mi-router-ax3000t"]') }}
      max-parallel: 2
    steps:
      - name: Debug information
        run: |
          echo "Trigger: ${{ github.event_name }}"
          echo "Device model: ${{ matrix.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "Source repo: ${{ env.REPO_URL }} Branch: ${{ env.REPO_BRANCH }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check disk space
        run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          if [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ]; then
            echo "Error: Insufficient disk space, available ${AVAILABLE}G, need at least ${MIN_SPACE}G"
            exit 1
          fi
          echo "Available disk space: ${AVAILABLE}G"

      - name: Initialize environment
        run: |
          sudo dnf install -y epel-release || echo "EPEL repo already exists or unavailable"
          sudo dnf makecache
          sudo dnf install -y \
            bash binutils bzip2 cmake coreutils curl diffutils findutils gawk gcc gcc-c++ git gzip make ncurses-devel patch python3 python3-pip rsync tar unzip vim wget zlib-devel which python3-setuptools
          sudo dnf install -y ccache || echo "Warning: ccache not available"
          sudo dnf install -y gh || echo "Warning: gh not available"
          sudo dnf groupinstall -y "Development Tools"
          sudo dnf autoremove -y
          sudo dnf clean all
          sudo timedatectl set-timezone "$TZ" || echo "Warning: Unable to set timezone"
          sudo mkdir -p /workdir
          sudo chown $USER:$USER /workdir
            bash \
            binutils \
            bzip2 \
            cmake \
            coreutils \
            curl \
            diffutils \
            findutils \
            gawk \
            gcc \
            gcc-c++ \
            git \
            gzip \
            make \
            ncurses-devel \
            patch \
            python3 \
            python3-pip \
            rsync \
            tar \
            unzip \
            vim \
            wget \
            zlib-devel \
            which \
            ccache \
            python3-setuptools \
            gh
          sudo dnf groupinstall -y "Development Tools"
          sudo dnf autoremove -y
          sudo dnf clean all
          sudo timedatectl set-timezone "$TZ" || echo "Warning: Unable to set timezone"
          sudo mkdir -p /workdir
          sudo chown $USER:$USER /workdir

      - name: Configure ccache
        run: |
          mkdir -p $HOME/.ccache
          ccache -M 5G
          echo "export PATH=/usr/lib64/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          echo "ccache statistics:"
          ccache -s

      - name: Install GitHub CLI
        run: |
          sudo dnf install -y gh || echo "Warning: Unable to install GitHub CLI, may be pre-installed or not needed"

      - name: Clone source code
        working-directory: /workdir
        run: |
          if [ -d "/workdir/openwrt" ]; then
            echo "Detected existing openwrt directory, cleaning up..."
            rm -rf /workdir/openwrt
          fi
          for i in {1..5}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "Clone failed, retry $i/5"
            sleep 10
          done
          if [ ! -d "/workdir/openwrt" ]; then
            echo "Error: Source code cloning failed"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Validate script files
        run: |
          if [ ! -f "$DIY_P1_SH" ]; then
            echo "Error: $DIY_P1_SH not found"
            exit 1
          fi
          if [ ! -f "$DIY_P2_SH" ]; then
            echo "Error: $DIY_P2_SH not found"
            exit 1
          fi
          chmod +x $DIY_P1_SH $DIY_P2_SH

      - name: Load feeds
        timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        timeout-minutes: 30
        run: |
          cd openwrt
          ./scripts/feeds update -a || { echo "Failed to update feeds"; exit 1; }
          ./scripts/feeds install -a || { echo "Failed to install feeds"; exit 1; }

      - name: Load configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ matrix.device_model }}=y" >> openwrt/.config
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          make defconfig

      - name: Download packages
        timeout-minutes: 30
        run: |
          set -e
          cd openwrt
          mkdir -p dl
          chmod -R u+rwX dl
          for attempt in {1..3}; do
            echo "Attempt $attempt: Starting package download..."
            if make download -j$(nproc) V=s 2>&1 | tee download.log; then
              echo "Package download successful"
              break
            else
              echo "Download attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "Error: Package download failed after 3 attempts"
                cat download.log
                exit 1
              fi
              sleep 10
            fi
          done
          if [ -d dl ] && [ -n "$(find dl -maxdepth 1 -type f)" ]; then
            echo "Cleaning up files smaller than 1KB in dl directory..."
            deleted_files=$(find dl -type f -size -1024c -exec rm -f {} \; -print | wc -l)
            echo "Deleted $deleted_files small files"
          else
            echo "dl directory empty or does not exist, no small files to clean"
          fi

      - name: Modify 5G 25dB
        if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          EEPROM_FILE=$(find package -type f -name "MT7981_iPAiLNA_EEPROM.bin" -print -quit 2>/dev/null)
          if [ -z "$EEPROM_FILE" ]; then
            echo "Error: EEPROM file not found"
            exit 1
          fi
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM file updated: $EEPROM_FILE"
          else
            echo "EEPROM file does not need modification: $EEPROM_FILE"
          fi

      - name: Compile firmware
        id: compile
        timeout-minutes: 180
        run: |
          set -e
          cd openwrt
          make -j$(nproc) V=s || make -j4 V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Upload compile logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-log-${{ matrix.device_model }}
          path: |
            openwrt/build_dir/**/*
            openwrt/logs/**/*
            openwrt/*.log

      - name: Extract firmware version
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt
          if [ -f build.version ]; then
            VERSION=$(grep -E '^VERSION=' build.version | cut -d'=' -f2 | sed 's/^r//g' | tr -d '[:space:]' || echo "unknown")
            echo "Extracted version: $VERSION"
            echo "FIRMWARE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          else
            VERSION=$(git rev-parse --short HEAD | cut -d'-' -f1 || echo "unknown")
            echo "build.version file not found, using Git commit hash: $VERSION"
            echo "FIRMWARE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Organize firmware and fix filenames
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade* *factory*; do
            if [ -f "$file" ] && ! echo "$file" | grep -q "-bl2"; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              EXT="${file##*.}"
              NEW_NAME="${{ matrix.device_model }}_25dB-${{ env.ENABLE_5G_25DB == 'true' && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}_${{ env.FILE_DATE }}_${TYPE}.${EXT}"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate tag and release description
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          echo "RELEASE_TAG=ImmortalWrt-24.10-${{ matrix.device_model }}-${{ env.FIRMWARE_VERSION }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
            **Firmware Version**: ImmortalWrt ${{ env.FIRMWARE_VERSION }}  
            **Device**: ${{ matrix.device_model }}  
            **Build Time**: $(date +"%Y-%m-%d %H:%M %Z")  
            **High Power Mode**: ${{ env.ENABLE_5G_25DB == 'true' && 'Enabled' || 'Disabled' }}     
             echo "status=success" >> $GITHUB_OUTPUT

      - name: Publish firmware
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade*.*
            ${{ env.FIRMWARE }}/*factory*.*
          overwrite: true

      - name: Validate WebDAV environment variables
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          if [ -z "${{ env.WEBDAV_URL }}" ] || [ -z "${{ env.WEBDAV_USERNAME }}" ] || [ -z "${{ env.WEBDAV_PASSWORD }}" ]; then
            echo "Error: WebDAV environment variables not properly configured"
            exit 1
          fi
          echo "WebDAV environment variables validated successfully"

      - name: Upload to WebDAV
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          set -e
          echo "Searching for firmware files..."
          FIRMWARE_FILES=$(find openwrt/bin/targets -type f \( -name "*sysupgrade*.*" -o -name "*factory*.*" \) ! -name "*-bl2*" || true)
          if [ -z "$FIRMWARE_FILES" ]; then
            echo "No firmware files found, skipping upload"
            exit 0
          fi
          echo "Found files: $FIRMWARE_FILES"
          for FILE in $FIRMWARE_FILES; do
            NEW_NAME="${{ matrix.device_model }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            echo "Uploading: $FILE → $NEW_NAME"
            RESPONSE=$(curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                   -T "$FILE" \
                   "${{ env.WEBDAV_URL }}/$NEW_NAME" -w "%{http_code}" -o /dev/null || echo "failed")
            if [ "$RESPONSE" = "failed" ] || { [ "$RESPONSE" -ne 201 ] && [ "$RESPONSE" -ne 204 ] && [ "$RESPONSE" -ne 200 ]; }; then
              echo "Upload failed: $NEW_NAME (HTTP status code: $RESPONSE)"
              exit 1
            fi
            echo "Upload successful: $NEW_NAME"
          done
          echo "Upload completed!"

      - name: Clean old releases
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --repo ${{ github.repository }} --limit 20 --json name --jq '.[] | select(.name | test("ImmortalWrt-24.10-${{ matrix.device_model }}")) | .name' | tail -n +5 | xargs -I {} gh release delete {} --yes || echo "Warning: Failed to delete release {}"

      - name: Clean old workflow runs
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 7
          keep_minimum_runs: 3
