```yaml
# 工作流名称，构建 ImmortalWrt 24.10 固件（基于内核 6.6）
# 优化：检测资源存在性，跳过不必要的步骤；若资源存在且小于7天，跳过清理
name: test-IMwrt-24.10-6.6

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - huasifei_wh3000-emmc
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: '启用 5G 25dB 修改'
        type: boolean
        required: true
        default: false
      repo_url:
        description: '源仓库 URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: '源仓库分支'
        default: 'openwrt-24.10-6.6'

# 环境变量设置
env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  ENABLE_5G_25DB: ${{ github.event.inputs.enable_5g_25db || 'false' }}

jobs:
  build:
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ github.event.inputs.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "源仓库: ${{ env.REPO_URL }} 分支: ${{ env.REPO_BRANCH }}"

      - name: 检查磁盘空间
        run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          if [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ]; then
            echo "错误：磁盘空间不足，可用 ${AVAILABLE}G，需至少 ${MIN_SPACE}G"
            exit 1
          fi
          echo "可用磁盘空间：${AVAILABLE}G"

      - name: 检查并安装依赖
        run: |
          # 检查必要依赖是否已安装
          DEPENDENCIES="bash binutils bzip2 coreutils curl diffutils findutils gawk gcc gcc-c++ git gzip make ncurses-devel patch python3 python3-pip rsync tar unzip vim wget zlib-devel which "
          MISSING_DEPS=""
          for dep in $DEPENDENCIES; do
            if ! rpm -q "$dep" >/dev/null 2>&1; then
              MISSING_DEPS="$MISSING_DEPS $dep"
            fi
          done
          if [ -z "$MISSING_DEPS" ]; then
            echo "所有依赖已安装，跳过安装"
          else
            echo "检测到缺失依赖: $MISSING_DEPS"
            sudo dnf update -y
            sudo dnf install -y epel-release || echo "EPEL 仓库已存在或不可用"
            sudo dnf config-manager --enable epel || true
            sudo dnf makecache
            sudo dnf install -y $MISSING_DEPS
            sudo dnf groupinstall -y "Development Tools"
            sudo dnf autoremove -y
            sudo dnf clean all
          fi
          sudo timedatectl set-timezone "$TZ" || echo "警告：无法设置时区"
          sudo mkdir -p /workdir /mnt/tmpfs
          sudo mount -t tmpfs -o size=2G tmpfs /mnt/tmpfs || echo "警告：无法挂载 tmpfs"
          sudo mkdir -p /mnt/tmpfs/dl /mnt/tmpfs/ccache
          sudo chown $USER:$USER /workdir /mnt/tmpfs

      - name: 配置 ccache
        run: |
          ln -sf /mnt/tmpfs/ccache $HOME/.ccache
          # 检查 ccache 目录是否需要清理
          if [ -d "$HOME/.ccache" ] && [ -z "$(find $HOME/.ccache -maxdepth 1 -mtime -7)" ]; then
            echo "ccache 目录超过7天未更新，清理中..."
            rm -rf $HOME/.ccache
          fi
          mkdir -p $HOME/.ccache
          echo "export PATH=/usr/lib64/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 10G
          echo "base_dir = $(pwd)/openwrt" >> $HOME/.ccache/ccache.conf
          ccache -s

      - name: 恢复缓存
        run: |
          if [ -d "/workdir/cache/dl" ] && [ -z "$(find /workdir/cache/dl -maxdepth 1 -mtime -7)" ]; then
            echo "dl 缓存超过7天，清理中..."
            rm -rf /workdir/cache/dl
          fi
          if [ -d "/workdir/cache/ccache" ] && [ -z "$(find /workdir/cache/ccache -maxdepth 1 -mtime -7)" ]; then
            echo "ccache 缓存超过7天，清理中..."
            rm -rf /workdir/cache/ccache
          fi
          if [ -d "/workdir/cache/dl" ]; then
            echo "恢复 dl 缓存..."
            rm -rf openwrt/dl
            cp -r /workdir/cache/dl openwrt/dl
          fi
          if [ -d "/workdir/cache/ccache" ]; then
            echo "恢复 ccache 缓存..."
            rm -rf $HOME/.ccache
            cp -r /workdir/cache/ccache $HOME/.ccache
          fi

      - name: 克隆源码
        working-directory: /workdir
        run: |
          # 检查 openwrt 目录是否需要清理
          if [ -d "openwrt" ] && [ -z "$(find openwrt -maxdepth 1 -mtime -7)" ]; then
            echo "openwrt 目录超过7天未更新，清理中..."
            rm -rf openwrt
          fi
          if [ -d "openwrt" ]; then
            echo "openwrt 目录已存在且未过期，跳过克隆"
            cd openwrt
            git fetch origin $REPO_BRANCH
            git reset --hard origin/$REPO_BRANCH
          else
            for i in {1..30}; do
              echo "尝试 $i/30: 克隆源码..."
              if git clone $REPO_URL -b $REPO_BRANCH openwrt; then
                echo "源码克隆成功"
                break
              else
                echo "克隆失败，重试 $i/30"
                [ $i -eq 30 ] && { echo "错误：源码克隆失败，跳过"; break; }
                sleep 5
              fi
            done
          fi
          if [ ! -d "openwrt" ]; then
            echo "警告：源码克隆最终失败，继续执行后续步骤"
          else
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
            ln -sf /mnt/tmpfs/dl openwrt/dl
          fi

      - name: 验证脚本文件
        run: |
          for script in "$DIY_P1_SH" "$DIY_P2_SH"; do
            if [ ! -f "$script" ]; then
              echo "错误：未找到 $script"
              exit 1
            fi
            chmod +x "$script"
          done

      - name: 加载 Feeds
        timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 Feeds
        timeout-minutes: 15
        run: |
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          for i in {1..30}; do
            echo "尝试 $i/30: 更新 Feeds..."
            if ./scripts/feeds update luci packages 2>&1 | tee feeds.log; then
              echo "Feeds 更新成功"
              ./scripts/feeds install -a && break || echo "安装 Feeds 失败，继续重试"
            else
              echo "更新 Feeds 失败，重试 $i/30"
              [ $i -eq 30 ] && { echo "错误：更新 Feeds 失败，跳过"; cat feeds.log; break; }
              sleep 5
            fi
          done

      - name: 加载配置
        run: |
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ github.event.inputs.device_model }}=y" >> openwrt/.config
          echo "CONFIG_DOWNLOAD_MIRROR=\"https://mirrors.tuna.tsinghua.edu.cn/openwrt\"" >> openwrt/.config
          $GITHUB_WORKSPACE/$DIY_P2_SH
          make defconfig

      - name: 下载软件包
        timeout-minutes: 15
        run: |
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          mkdir -p dl
          chmod -R u+rwX dl
          # 检查 dl 目录是否需要下载
          if [ -d "dl" ] && [ -n "$(find dl -maxdepth 1 -mtime -7)" ]; then
            echo "dl 目录存在且未过期，跳过下载"
          else
            for attempt in {1..30}; do
              echo "尝试 $attempt/30: 开始下载软件包..."
              if make download -j$(nproc) DOWNLOAD_TOOL=aria2c V=s 2>&1 | tee download.log; then
                echo "软件包下载成功"
                break
              else
                echo "下载尝试 $attempt 失败"
                [ $attempt -eq 30 ] && { echo "错误：软件包下载失败，跳过"; cat download.log; break; }
                sleep 5
              fi
            done
          fi
          [ -d dl ] && find dl -type f -size -1024c -delete || echo "dl 目录为空或不存在"

      - name: 修改 5G 25dB
        if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          [ ! -d . ] && { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          for attempt in {1..30}; do
            echo "尝试 $attempt/30: 查找 EEPROM 文件..."
            EEPROM_FILE=$(find package -type f -name "MT7981_iPAiLNA_EEPROM.bin" -print -quit 2>/dev/null)
            if [ -n "$EEPROM_FILE" ]; then
              echo "找到 EEPROM 文件: $EEPROM_FILE"
              break
            else
              echo "未找到 EEPROM 文件，重试 $attempt/30"
              [ $attempt -eq 30 ] && { echo "错误：未找到 EEPROM 文件，跳过"; exit 0; }
              sleep 5
            fi
          done
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM 文件已更新: $EEPROM_FILE"
          else
            echo "EEPROM 文件无需修改: $EEPROM_FILE"
          fi

      - name: 编译固件
        id: compile
        timeout-minutes: 120
        run: |
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          CORE_COUNT=$(nproc)
          THREAD_COUNT=$((CORE_COUNT * 3 / 2))
          for attempt in {1..30}; do
            echo "尝试 $attempt/30: 编译固件..."
            if make -j${THREAD_COUNT} V=s 2>&1 | tee compile.log || make -j2 V=s 2>&1 | tee -a compile.log || make -j1 V=s 2>&1 | tee -a compile.log; then
              echo "固件编译成功"
              echo "status=success" >> $GITHUB_OUTPUT
              break
            else
              echo "编译尝试 $attempt 失败"
              [ $attempt -eq 30 ] && { echo "错误：固件编译失败，跳过"; cat compile.log; break; }
              sleep 5
            fi
          done
          echo "DEVICE_NAME=_${{ github.event.inputs.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 保存编译日志
        if: failure() || steps.compile.outputs.status != 'success'
        run: |
          mkdir -p logs
          cp openwrt/*.log logs/ 2>/dev/null || true
          cp openwrt/compile.log logs/ 2>/dev/null || true
          cp openwrt/download.log logs/ 2>/dev/null || true
          cp openwrt/feeds.log logs/ 2>/dev/null || true
          tar -czf compile-log-${{ github.event.inputs.device_model }}.tar.gz logs
          echo "日志已保存至 compile-log-${{ github.event.inputs.device_model }}.tar.gz"

      - name: 提取固件版本号
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt || { echo "警告：openwrt 目录不存在，跳过"; exit 0; }
          if [ -f build.version ]; then
            VERSION=$(grep -E '^VERSION=' build.version | cut -d= -f2 | sed 's/^r//g' | tr -d '[:space:]' || echo "unknown")
            echo "提取的版本号: $VERSION"
          else
            VERSION=$(git rev-parse --short HEAD | cut -d'-' -f1 || echo "unknown")
            echo "未找到 build.version 文件，使用 Git 提交哈希: $VERSION"
          fi
          echo "FIRMWARE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 整理固件文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/* || { echo "警告：固件目录不存在，跳过"; exit 0; }
          rm -rf packages
          for file in *sysupgrade* *factory*; do
            if [ -f "$file" ] && ! echo "$file" | grep -q "-bl2"; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              EXT="${file##*.}"
              NEW_NAME="${{ github.event.inputs.device_model }}_25dB-${{ env.ENABLE_5G_25DB == 'true' && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}_${{ env.FILE_DATE }}_${TYPE}.${EXT}"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 保存缓存
        if: steps.compile.outputs.status == 'success'
        run: |
          mkdir -p /workdir/cache
          rm -rf /workdir/cache/dl /workdir/cache/ccache
          cp -r openwrt/dl /workdir/cache/dl 2>/dev/null || echo "警告：无法缓存 dl 目录"
          cp -r $HOME/.ccache /workdir/cache/ccache 2>/dev/null || echo "警告：无法缓存 ccache"
          echo "缓存已保存至 /workdir/cache"

      - name: 上传到 WebDAV
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          FIRMWARE_FILES=$(find openwrt/bin/targets -type f \( -name "*sysupgrade*.*" -o -name "*factory*.*" \) ! -name "*-bl2*" 2>/dev/null || true)
          [ -z "$FIRMWARE_FILES" ] && { echo "未找到固件文件，跳过上传"; exit 0; }
          for FILE in $FIRMWARE_FILES; do
            NEW_NAME="${{ github.event.inputs.device_model }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            for attempt in {1..30}; do
              echo "尝试 $attempt/30: 上传 $FILE → $NEW_NAME"
              if curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" -T "$FILE" "${{ env.WEBDAV_URL }}/$NEW_NAME" 2>&1 | tee upload.log; then
                echo "上传成功: $NEW_NAME"
                break
              else
                echo "上传失败，重试 $attempt/30"
                [ $attempt -eq 30 ] && { echo "错误：上传 $NEW_NAME 失败，跳过"; cat upload.log; break; }
                sleep 5
              fi
            done
          done
```
