# 工作流名称，构建 ImmortalWrt 24.10 固件（基于内核 6.6）
# 优化：仅保留手动触发（workflow_dispatch），移除 repository_dispatch 和 schedule 触发以简化逻辑
name: test-IMwrt-24.10-6.6

on:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc
          - huasifei_wh3000-emmc
          - abt_asr3000
          - cetron_ct3003
          - cmcc_a10
          - h3c_nx30pro
          - imou_lc-hx3001
          - jcg_q30
          - konka_komi-a31
          - livinet_zr-3020
          - mt7981-360-t7-108M
          - mt7981-clt-r30b1
          - mt7981-clt-r30b1-112M
          - xiaomi_mi-router-ax3000t
          - xiaomi_mi-router-ax3000t-stock
          - xiaomi_mi-router-wr30u-112m
          - xiaomi_mi-router-wr30u-stock
      enable_5g_25db:
        description: '启用 5G 25dB 修改'
        type: boolean
        required: true
        default: false
      repo_url:
        description: '源仓库 URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: '源仓库分支'
        default: 'openwrt-24.10-6.6'

# 环境变量设置
# 优化：移除不必要的 UPLOAD_RELEASE 和 GitHub 权限设置，专注于自托管核心功能
env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 24.10-6.6.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
  ENABLE_5G_25DB: ${{ github.event.inputs.enable_5g_25db || 'false' }}

jobs:
  build:
    # 指定自托管 ARM64 运行器
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ github.event.inputs.device_model }}"
          echo "5G 25dB: ${{ env.ENABLE_5G_25DB }}"
          echo "源仓库: ${{ env.REPO_URL }} 分支: ${{ env.REPO_BRANCH }}"

      - name: 检查磁盘空间
        # 优化：保留磁盘空间检查，确保 VPS 有足够空间
        run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          if [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ]; then
            echo "错误：磁盘空间不足，可用 ${AVAILABLE}G，需至少 ${MIN_SPACE}G"
            exit 1
          fi
          echo "可用磁盘空间：${AVAILABLE}G"

      - name: 初始化环境
        # 优化：使用 dnf 替换 apt-get，适配 Oracle Linux，精简依赖包
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo dnf update -y
          # 启用并刷新 EPEL
          sudo dnf install -y epel-release
          sudo dnf config-manager --enable epel || true
          sudo dnf makecache
          # 分步安装依赖包，单独尝试安装 ccache
          sudo dnf install -y \
            bash binutils bzip2 coreutils curl diffutils findutils gawk gcc gcc-c++ git \
            gzip make ncurses-devel patch python3 python3-pip rsync tar unzip vim wget \
            zlib-devel which
          sudo dnf install -y ccache || echo "警告：ccache 未能通过 dnf 安装"
          sudo dnf groupinstall -y "Development Tools"
          sudo dnf autoremove -y
          sudo dnf clean all
          sudo timedatectl set-timezone "$TZ" || echo "警告：无法设置时区"
          sudo mkdir -p /workdir
          sudo chown $USER:$USER /workdir
      - name: 配置 ccache
        # 优化：确保 ccache 适配 ARM64 路径，设置缓存大小为 5G
        run: |
          mkdir -p $HOME/.ccache
          echo "export PATH=/usr/lib64/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 5G
          ccache -s

      - name: 克隆源码
        # 优化：减少重试次数（5 → 3），缩短睡眠时间以提高效率
        working-directory: /workdir
        run: |
          if [ -d "openwrt" ]; then
            echo "检测到 openwrt 目录，清理中..."
            rm -rf openwrt
          fi
          for i in {1..3}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "克隆失败，重试 $i/3"
            sleep 5
          done
          if [ ! -d "openwrt" ]; then
            echo "错误：源码克隆失败"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 验证脚本文件
        run: |
          for script in "$DIY_P1_SH" "$DIY_P2_SH"; do
            if [ ! -f "$script" ]; then
              echo "错误：未找到 $script"
              exit 1
            fi
            chmod +x "$script"
          done

      - name: 加载 Feeds
        timeout-minutes: 10
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 Feeds
        # 优化：缩短超时时间（30 → 20 分钟）
        timeout-minutes: 20
        run: |
          cd openwrt
          ./scripts/feeds update -a || { echo "更新 Feeds 失败"; exit 1; }
          ./scripts/feeds install -a || { echo "安装 Feeds 失败"; exit 1; }

      - name: 加载配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ github.event.inputs.device_model }}=y" >> openwrt/.config
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          make defconfig

      - name: 下载软件包
        # 优化：缩短超时时间（30 → 20 分钟），添加重试逻辑并记录日志
        timeout-minutes: 20
        run: |
          cd openwrt
          mkdir -p dl
          chmod -R u+rwX dl
          for attempt in {1..3}; do
            echo "尝试 $attempt: 开始下载软件包..."
            if make download -j$(nproc) V=s 2>&1 | tee download.log; then
              echo "软件包下载成功"
              break
            else
              echo "下载尝试 $attempt 失败"
              [ $attempt -eq 3 ] && { echo "错误：软件包下载失败"; cat download.log; exit 1; }
              sleep 5
            fi
          done
          [ -d dl ] && find dl -type f -size -1024c -delete || echo "dl 目录为空或不存在"

      - name: 修改 5G 25dB
        if: env.ENABLE_5G_25DB == 'true'
        working-directory: ./openwrt
        run: |
          EEPROM_FILE=$(find package -type f -name "MT7981_iPAiLNA_EEPROM.bin" -print -quit 2>/dev/null)
          if [ -z "$EEPROM_FILE" ]; then
            echo "错误：未找到 EEPROM 文件"
            exit 1
          fi
          EXPECTED_CONTENT=$(printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B')
          CURRENT_CONTENT=$(dd if="$EEPROM_FILE" bs=1 skip=$((0x445)) count=20 2>/dev/null || echo "")
          if [ "$CURRENT_CONTENT" != "$EXPECTED_CONTENT" ]; then
            printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of="$EEPROM_FILE" bs=1 seek=$((0x445)) conv=notrunc
            echo "EEPROM 文件已更新: $EEPROM_FILE"
          else
            echo "EEPROM 文件无需修改: $EEPROM_FILE"
          fi

      - name: 编译固件
        id: compile
        # 优化：缩短超时时间（180 → 120 分钟）
        timeout-minutes: 120
        run: |
          cd openwrt
          make -j$(nproc) V=s || make -j2 V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ github.event.inputs.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 保存编译日志
        if: failure()
        # 优化：本地保存日志，避免依赖 actions/upload-artifact
        run: |
          mkdir -p logs
          cp -r openwrt/build_dir logs/ 2>/dev/null || true
          cp -r openwrt/logs logs/ 2>/dev/null || true
          cp openwrt/*.log logs/ 2>/dev/null || true
          tar -czf compile-log-${{ github.event.inputs.device_model }}.tar.gz logs
          echo "日志已保存至 compile-log-${{ github.event.inputs.device_model }}.tar.gz"

      - name: 提取固件版本号
        id: version
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt
          if [ -f build.version ]; then
            VERSION=$(grep -E '^VERSION=' build.version | cut -d'=' -f2 | sed 's/^r//g' | tr -d '[:space:]' || echo "unknown")
            echo "提取的版本号: $VERSION"
          else
            VERSION=$(git rev-parse --short HEAD | cut -d'-' -f1 || echo "unknown")
            echo "未找到 build.version 文件，使用 Git 提交哈希: $VERSION"
          fi
          echo "FIRMWARE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 整理固件文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade* *factory*; do
            if [ -f "$file" ] && ! echo "$file" | grep -q "-bl2"; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              EXT="${file##*.}"
              NEW_NAME="${{ github.event.inputs.device_model }}_25dB-${{ env.ENABLE_5G_25DB == 'true' && 'on' || 'off' }}_${{ env.FIRMWARE_VERSION }}_${{ env.FILE_DATE }}_${TYPE}.${EXT}"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传到 WebDAV
        if: steps.compile.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        # 优化：简化 WebDAV 上传逻辑，移除 HTTP 状态码检查
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          FIRMWARE_FILES=$(find openwrt/bin/targets -type f \( -name "*sysupgrade*.*" -o -name "*factory*.*" \) ! -name "*-bl2*" || true)
          [ -z "$FIRMWARE_FILES" ] && { echo "未找到固件文件，跳过上传"; exit 0; }
          for FILE in $FIRMWARE_FILES; do
            NEW_NAME="${{ github.event.inputs.device_model }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            echo "上传: $FILE → $NEW_NAME"
            curl --retry 3 --retry-delay 5 -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                 -T "$FILE" "${{ env.WEBDAV_URL }}/$NEW_NAME" || { echo "上传失败: $NEW_NAME"; exit 1; }
            echo "上传成功: $NEW_NAME"
          done
