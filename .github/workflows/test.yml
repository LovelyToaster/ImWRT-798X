name: ImmortalWrt-Builder-24.10-8

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_model:
        description: '选择目标设备型号'
        type: choice
        required: true
        options:
          - cmcc_rax3000m (中国移动 RAX3000M)
          - cmcc_rax3000m-emmc (中国移动 RAX3000M eMMC版)
          - cmcc_rax3000m-usboffload (中国移动 RAX3000M USB卸载版)
          - cmcc_rax3000m-emmc-usboffload (中国移动 RAX3000M eMMC USB卸载版)
          - abt_asr3000 (ABT ASR3000)
          - cetron_ct3003 (赛创 CT3003)
          - cmcc_a10 (中国移动 A10)
          - h3c_nx30pro (H3C NX30 Pro)
          - imou_lc-hx3001 (IMOU LC-HX3001)
          - jcg_q30 (JCG Q30)
          - konka_komi-a31 (康佳 KOMI-A31)
          - livinet_zr-3020 (Livinet ZR-3020)
          - mt7981-360-t7-108M (MT7981 360 T7 108M)
          - mt7981-clt-r30b1 (MT7981 CLT R30B1)
          - mt7981-clt-r30b1-112M (MT7981 CLT R30B1 112M)
          - xiaomi_mi-router-ax3000t (小米路由器 AX3000T)
          - xiaomi_mi-router-ax3000t-stock (小米路由器 AX3000T 原厂版)
          - xiaomi_mi-router-wr30u-112m (小米路由器 WR30U 112M)
          - xiaomi_mi-router-wr30u-stock (小米路由器 WR30U 原厂版)
      enable_5g_25db:
        description: '启用 5G 25dB 高功率模式'
        type: boolean
        required: true
        default: true
      upload_bin_dir:
        description: '上传 bin 目录'
        type: boolean
        required: false
        default: false
      start_from_compile:
        description: '直接从编译步骤开始（自动准备环境）'
        type: boolean
        required: false
        default: false
  schedule:
    - cron: '0 21 * * *' # UTC 21:00 = Asia/Shanghai 05:00

permissions:
  contents: write
  actions: write

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: 2410
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 2410.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}

jobs:
  check-source:
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule'
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 克隆源码并检查更新
        working-directory: /tmp
        run: |
          git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
          cd openwrt
          CURRENT_HASH=$(git rev-parse HEAD)
          echo "当前提交哈希: $CURRENT_HASH"
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV

      - name: 获取上一次编译的哈希
        id: cache-hash
        uses: actions/cache@v4
        with:
          path: last_build_hash.txt
          key: last-build-hash-${{ env.REPO_BRANCH }}

      - name: 检查源码是否更新
        id: check
        run: |
          if [ -f last_build_hash.txt ]; then
            LAST_HASH=$(cat last_build_hash.txt)
            echo "上次编译哈希: $LAST_HASH"
            if [ "$LAST_HASH" != "${{ env.CURRENT_HASH }}" ]; then
              echo "源码已更新，触发编译。"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "源码未更新，跳过编译。"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "未找到上次编译哈希，触发编译。"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          echo "${{ env.CURRENT_HASH }}" > last_build_hash.txt

  build:
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && needs.check-source.outputs.should_build == 'true')
    name: 编译 ${{ matrix.device_model }}
    strategy:
      matrix:
        device_model: ${{ github.event_name == 'schedule' && fromJSON('["cmcc_rax3000m-usboffload", "cmcc_rax3000m-emmc-usboffload"]') || fromJSON(format('["{0}"]', github.event.inputs.device_model)) }}
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "设备型号: ${{ matrix.device_model }}"
          echo "是否直接从编译开始: ${{ github.event.inputs.start_from_compile }}"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
            python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
            uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zip
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 配置 ccache
        run: |
          echo "CCACHE_DIR=/github/home/.ccache" >> $GITHUB_ENV
          ccache --max-size=1G
          ccache --show-stats

      - name: 缓存 ccache
        uses: actions/cache@v4
        with:
          path: /github/home/.ccache
          key: ccache-${{ env.REPO_BRANCH }}-${{ matrix.device_model }}-${{ hashFiles(env.CONFIG_FILE) }}
          restore-keys: |
            ccache-${{ env.REPO_BRANCH }}-${{ matrix.device_model }}-
            ccache-${{ env.REPO_BRANCH }}-

      - name: 缓存下载的依赖包
        uses: actions/cache@v4
        with:
          path: /workdir/openwrt/dl
          key: dl-${{ env.REPO_BRANCH }}-${{ hashFiles('openwrt/feeds.conf.default') }}
          restore-keys: |
            dl-${{ env.REPO_BRANCH }}-

      - name: 检查缓存恢复后的目录状态
        working-directory: /workdir
        run: |
          if [ -d "/workdir/openwrt" ]; then
            echo "缓存恢复后，/workdir/openwrt 已存在，内容如下："
            ls -la /workdir/openwrt
          else
            echo "缓存恢复后，/workdir/openwrt 不存在。"
          fi

      - name: 清理工作目录
        if: github.event.inputs.start_from_compile != 'true'
        working-directory: /workdir
        run: |
          if [ -d "/workdir/openwrt" ]; then
            rm -rf /workdir/openwrt
            echo "已清理 /workdir/openwrt 目录。"
          fi

      - name: 克隆源码
        if: github.event.inputs.start_from_compile != 'true'
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 加载 Feeds
        if: github.event.inputs.start_from_compile != 'true'
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新 Feeds
        if: github.event.inputs.start_from_compile != 'true'
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 加载配置
        if: github.event.inputs.start_from_compile != 'true'
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek_mt7981_DEVICE_${{ matrix.device_model }}=y" >> openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: 下载包
        id: package
        if: github.event.inputs.start_from_compile != 'true'
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 自动准备编译环境
        if: github.event.inputs.start_from_compile == 'true'
        run: |
          # 如果 /workdir/openwrt 不存在，克隆源码
          if [ ! -d "/workdir/openwrt" ]; then
            echo "未找到 /workdir/openwrt 目录，正在克隆源码..."
            cd /workdir
            git clone $REPO_URL -b $REPO_BRANCH openwrt
            ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          else
            echo "/workdir/openwrt 目录已存在，跳过克隆。"
          fi

          # 加载 Feeds（如果需要）
          cd /workdir/openwrt
          if [ ! -f "feeds.conf.default" ]; then
            echo "加载 Feeds..."
            [ -e $FEEDS_CONF ] && mv $FEEDS_CONF feeds.conf.default
            chmod +x $DIY_P1_SH
            $GITHUB_WORKSPACE/$DIY_P1_SH
            ./scripts/feeds update -a
            ./scripts/feeds install -a
          else
            echo "Feeds 已存在，跳过加载。"
          fi

          # 加载配置（如果需要）
          if [ ! -f ".config" ]; then
            echo "加载配置..."
            [ -e files ] && mv files openwrt/files
            [ -e $CONFIG_FILE ] && mv $CONFIG_FILE .config
            echo "CONFIG_TARGET_mediatek_mt7981_DEVICE_${{ matrix.device_model }}=y" >> .config
            chmod +x $DIY_P2_SH
            $GITHUB_WORKSPACE/$DIY_P2_SH
            make defconfig
          else
            echo ".config 文件已存在，跳过配置。"
          fi

          # 确保 dl 目录存在（如果缓存未恢复）
          if [ ! -d "dl" ]; then
            echo "未找到 dl 目录，正在下载依赖包..."
            make download -j8
            find dl -size -1024c -exec ls -l {} \;
            find dl -size -1024c -exec rm -f {} \;
          else
            echo "dl 目录已存在，跳过下载。"
          fi

      - name: 修改 5G 25dB
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.enable_5g_25db == 'true')
        working-directory: /workdir/openwrt
        run: |
          mkdir -p package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom
          printf '\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B\x2B' | dd of=package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin bs=1 seek=$((0x445)) conv=notrunc

      - name: 编译固件
        id: compile
        timeout-minutes: 120
        run: |
          set -e
          cd /workdir/openwrt
          echo -e "$(nproc) 线程使用 ccache 编译"
          make -j$(nproc) CCACHE=ccache || make -j1 CCACHE=ccache || { make -j1 V=s CCACHE=ccache && exit 1; }
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_${{ matrix.device_model }}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 显示 ccache 统计信息
        if: always()
        run: |
          ccache --show-stats

      - name: 检查磁盘
        if: always()
        run: |
          df -hT

      - name: 上传 bin 目录
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_bin_dir == 'true')
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 整理固件并简化文件名
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd openwrt/bin/targets/*/*
          rm -rf packages
          for file in *sysupgrade.bin *factory.bin; do
            if [ -f "$file" ]; then
              TYPE=$(echo "$file" | grep -o "sysupgrade\|factory")
              NEW_NAME="${{ matrix.device_model }}_$(date +"%Y%m%d%H%M")_25dB-${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && 'on' || 'off' }}_${TYPE}.bin"
              mv "$file" "$NEW_NAME"
            fi
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 筛选并压缩固件
        id: compress
        if: steps.compile.outputs.status == 'success'
        run: |
          set -e
          cd ${{ env.FIRMWARE }}
          mkdir -p temp
          find . -type f \( -name "*sysupgrade.bin" -o -name "*factory.bin" \) -exec cp {} temp/ \;
          cd temp
          ZIP_NAME="${{ matrix.device_model }}${{ env.FILE_DATE }}_25dB-${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && 'on' || 'off' }}.zip"
          zip -r "$ZIP_NAME" .
          echo "ZIP_PATH=$PWD/$ZIP_NAME" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 生成标签和发布描述
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
        run: |
          set -e
          echo "release_tag=v24.10-${{ matrix.device_model }}" >> $GITHUB_OUTPUT
          cat << EOF > release.txt
          # ImmortalWrt 24.10 - ${{ matrix.device_model }}

          **版本**: 24.10  
          **设备**: ${{ matrix.device_model }}  
          **编译时间**: $(date +"%Y-%m-%d %H:%M %Z")  
          **高功率模式**: ${{ (github.event_name == 'schedule' || github.event.inputs.enable_5g_25db == 'true') && '已启用' || '未启用' }}  

          ### 下载
          - 固件文件已附在此发布下方  
          - 源码: [immortalwrt-mt798x-24.10](https://github.com/padavanonly/immortalwrt-mt798x-24.10)

          ### 使用方法
          1. 确认设备型号匹配  
          2. 备份原始固件  
          3. 通过 Web 或 SSH 刷入

          > **注意**: 使用不当可能损坏设备，请谨慎操作！
          EOF
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin
          overwrite: true

      - name: 上传固件到 GitHub Artifacts
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: |
            ${{ env.FIRMWARE }}/*sysupgrade.bin
            ${{ env.FIRMWARE }}/*factory.bin

      - name: 上传到 WebDAV
        if: steps.compress.outputs.status == 'success' && env.WEBDAV_URL && env.WEBDAV_USERNAME && env.WEBDAV_PASSWORD
        run: |
          set -e
          curl -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" -T "${{ env.ZIP_PATH }}" "${{ env.WEBDAV_URL }}/${{ env.ZIP_NAME }}"

      - name: 删除旧运行
        if: steps.tag.outputs.status == 'success'
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2
